#!/usr/bin/perl

use 5.010;
use strict;
use warnings;
use Storable qw(retrieve store);
use Passwd::Keyring::Gnome;
use Config::Tiny;
use Getopt::Long;

our $VERSION = '0.01';

my ($app) = $0 =~ m{.*/(.*)$};

my %options;
GetOptions( \%options, 'host=s', 'debug!' );

my %config;

for my $config_file ( "/etc/$app.conf", "$ENV{HOME}/.$app.conf" ) {
    if ( -e $config_file ) {
        my $config = Config::Tiny->read($config_file)->{_};
        die "Can't read config: $Config::Tiny::errstr\n"
          if $Config::Tiny::errstr;
        %config = ( %config, %$config );
    }
}

%config = ( %config, %options );

require SOAP::Lite;
if ( $config{debug} ) {
    SOAP::Lite->import( +trace => [ debug => \&process_trace ] );
}
else {
    SOAP::Lite->import();
}


my $destination = shift;
$destination =~ s/^tel://;

my $host = $config{host};

die "Parameter host needs to be set in config file\n"
  if !$host;

my $dial_prefix      = $config{dial_prefix}      // '0';
my $max_internal_len = $config{max_internal_len} // 3;

if ( length($destination) > $max_internal_len ) {
	$destination = $dial_prefix . $destination;
}

my $keyring = Passwd::Keyring::Gnome->new(
    app   => $app,
    group => "default",
);

my $username = $ENV{USER};

my $password = $keyring->get_password( $username, $app );
unless ($password) {
    $password = get_password( $username, $keyring, $app );
}

my $soap = SOAP::Lite->new();

$soap->proxy( "https://$host//webdialer/services/WebdialerSoapService70" );

my $auth = SOAP::Data->name('in0')->type('urn:Credential')->value(
    \SOAP::Data->value(
        SOAP::Data->name( 'userID'   => $username ),
        SOAP::Data->name( 'password' => $password ),
    )
);

my $cache_file = "$ENV{HOME}/.$app.cache";

my $profile;
if ( -e $cache_file && ( stat(_) )[9] > time - 60 * 60 * 10 ) {
    $profile = retrieve($cache_file);
}
else {
    $profile = $soap->call( getProfileDetailSoap => $auth )->result;
    my $rc = $profile->{responseCode};
    if ( $rc != 0 ) {
        auth_error() if $rc == 1;
        warning( $profile->{responseDescription} );
	exit 1;
    }
    store $profile, $cache_file;
}

my $device = $profile->{deviceInfoListDetail}->[0]->{deviceName};
my $line   = $profile->{deviceInfoListDetail}->[0]->{lines}->[0];

my $call = $soap->call(
    makeCallSoap => $auth,
    SOAP::Data->name('in1')->type('xsd:string')->value($destination),
    SOAP::Data->name('in2')->type('urn:UserProfile')->value(
        \SOAP::Data->value(
            SOAP::Data->name( 'user'       => $username ),
            SOAP::Data->name( 'deviceName' => $device ),
            SOAP::Data->name( 'lineNumber' => $line ),
        )
    ),
)->result;

my $rc = $call->{responseCode};

if ( $rc == 0 ) {
    $keyring->set_password( $username, $password, $app );
}
else {
    auth_error() if $rc == 2;
    warning( $call->{responseDescription} );
    exit 1;
}

sub get_password {
    my ( $username, $keyring ) = @_;
    my $password = qx(zenity --password --title "Password for Cisco Webdialer");
    chomp($password);
    my $rc = $? >> 8;
    if ( $rc == 0 ) {
        return $password;
    }
    return;
}

sub auth_error {
    $keyring->clear_password( $username, $app );
}

sub warning {
    system( 'zenity', '--warning', '--text', $_[0] );
}

sub process_trace {
    my ($trace) = @_;
    $trace =~ s{(<password .*?>).*?(</password>)}{$1*****$2}g;
    warn "$trace\n";
}

__END__

=pod

=head1 NAME

webdialer - make calls via cisco webdialer api

=head1 SYNOPSIS

webdialer [ --host HOST ] [ --debug ] TEL_URL|NUMBER

=head1 DESCRIPTION

I<webdialer> uses the CISCO webdialer API to make call. Its first and only
argument should be the telefon number to call. The optional scheme prefix
I<tel:> is removed to make calls by end user applications easier.

=head1 OPTIONS

=over 4

=item --host HOSTNAME

The hostname of the cisco server.

=item --debug

Enables the debug trace option of SOAP::Lite. All http traffic sent to
and received by the cisco server will be printed to stderr. Special care
is given to hide the password.

=back

=head1 INSTALLATION

The API expects the password of the user. I<webdialer> will prompt the user via
zenity and saves the password in the GNOME Keyring. The following commands
should install all the dependencies on Debian:

  $ apt-get install gnome-keyring libgnome-keyring-dev zenity
  $ cpanm Passwd::Keyring::Gnome

=head1 COPYRIGHT AND LICENSE

Copyright 2015 Mario Domgoergen C<< <mario@domgoergen.com> >>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
